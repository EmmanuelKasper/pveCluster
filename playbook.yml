---
- hosts: all
  gather_facts: yes
  become: yes
  become_method: sudo

  tasks:

    # Idempotent way to build a /etc/hosts file with Ansible using your Ansible hosts inventory for a source.
    # Will include all hosts the playbook is run on.
    # See http://xmeblog.blogspot.com/2013/06/ansible-dynamicaly-update-etchosts.html for explanation
    - name: Build hosts file
      lineinfile: dest=/etc/hosts regexp='.*{{ item }}$' line="{{ ansible_ssh_host }} {{item}}" state=present
      when: ansible_ssh_host is defined
      with_items: '{{groups.all}}'

    - name: set hostname
      hostname: name={{ inventory_hostname }}

    - name: set root password to root
      user: name=root password=$6$NujLAYHzgbY6$Lz/AP1KS7Wsg2AM1WbMwMmmjXutgsZ/I41XDrpbhl3mKc0TNIbz45waR.2sIGIcSbGo30pf.GJsUTdOS8klrZ/

    - name: Add Proxmox install repo apt key
      apt_key: url=http://download.proxmox.com/debian/key.asc state=present

    - name: Add promox pvetest repo
      apt_repository: repo='deb http://download.proxmox.com/debian jessie pvetest'

    - name: install our proxmox packages
      apt: pkg={{item}} update_cache=yes state=latest cache_valid_time=0
      with_items:
        - proxmox-ve
        - ssh
        - postfix
        - ksm-control-daemon
        - open-iscsi
        - systemd-sysv

    - name: upload a preseed file for kexec-tools containing our answers for debconf
      copy: src=files/kexec-tools.preseed dest=/var/tmp/kexec-tools.preseed

    - name: preconfigure kexec-tools to load the default kernel from grub config  
      command: debconf-set-selections /var/tmp/kexec-tools.preseed

    - name: install kexec-tools to quickly reboot
      apt: pkg=kexec-tools update_cache=no state=latest

    - name: create a bridge
      # > indicates a multiline string in YAML synthax
      shell: >
        pvesh create nodes/px1/network
        -iface vmbr0 -type bridge -bridge_ports eth1
        -address {{ ansible_ssh_host }} -netmask 255.0.0.0
        -autostart true

    # https://support.ansible.com/hc/en-us/articles/201958037-Reboot-a-server-and-wait-for-it-to-come-back
    - name: restart machine
      # workaround: the ansible task should close cleanly before the reboot, so we delay the reboot from 3 seconds
      shell: "sleep 3; shutdown -r now"
      # workaround: force one second waiting so the connection is not immediatly closed  
      async: 1
      poll: 0
      ignore_errors: true

    - name: waiting for server to come back
      #starts polling the server after a 25 second delay, wait for 300 seconds
      local_action: 
        wait_for
        host={{ ansible_ssh_host }}
        port=8006
        state=started
        delay=25
        timeout=300
      become: no

    - shell: uname -srm
      register: kernel_string

    - debug: var=kernel_string.stdout
